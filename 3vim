#!/usr/bin/env python
"""
    3vim
    ~~~~

    Run vim in triple-column

    :copyright: (c) 2016 by James Bowman
    :license: BSD, see LICENSE for more details.
"""

from __future__ import unicode_literals

import os
import pty
import select
import subprocess
import sys
import atexit
import time
import curses

import pyte

import locale
locale.setlocale(locale.LC_ALL, '')

if __name__ == "__main__":
    win = curses.initscr()
    atexit.register(curses.endwin)
    (sy, sx) = win.getmaxyx()
    ncols = 3
    tw = sx / ncols

    log = open("log", "w")
    stream = pyte.Stream()
    screen = pyte.DiffScreen(tw, ncols * sy)
    stream.attach(screen)
    if 0:
        print "hello", screen.buffer[0][0]
        sys.exit(0)

    os.environ[str('COLUMNS')] = str(tw)
    os.environ[str('LINES')] = str(ncols * sy)
    os.environ[str('TERM')] = "vt220"
    master, slave = pty.openpty()
    p = subprocess.Popen(["vim"] + sys.argv[1:], stdout=slave, stderr=slave)
    while p.returncode is None:
        (r,_,_) = select.select([master], [], [master, slave], .02)
        if r:
            d = os.read(master, 65536)
            stream.feed(unicode(d, 'utf-8'))
            # print "\n".join(screen.display)
            dl = list(screen.display)
            db = list(screen.buffer)
            for i in screen.dirty:
                # l = dl[i]
                # win.addstr(i % sy, (i / sy) * tw, l[:tw - 1].encode('utf-8'))
                l = db[i]
                win.move(i % sy, (i / sy) * tw)
                for c in l[:-1]:
                    attr = 0
                    if c.reverse:
                        attr |= curses.A_REVERSE
                    win.addch(c.data.encode('utf-8'), attr)
            screen.dirty = set()
            col = (screen.cursor.y / sy)
            cy = screen.cursor.y % sy
            cx = tw * col + min(tw - 1, screen.cursor.x)
            print >>log, "%r %d %d" % ((screen.cursor.x, screen.cursor.y, sx, sy, tw, col), cx, cy)
            if cy != (sy - 1) or cx != (sx - 1):
              win.move(cy, cx)
            win.refresh()
        else:
            p.poll()
